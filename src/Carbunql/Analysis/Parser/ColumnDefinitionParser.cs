using Carbunql.Definitions;
using Carbunql.Extensions;

namespace Carbunql.Analysis.Parser;

public static class ColumnDefinitionParser
{
	public static ColumnDefinition Parse(string text)
	{
		var r = new SqlTokenReader(text);
		var q = Parse(r);
		return q;
	}

	private static IEnumerable<string> PostgresAutoNumberTypes => new[] { "bigserial", "serial", "serial8", "serial4" };

	private static IEnumerable<string> GeneraetedIdentitySyntaxs => new[] { "generated always as identity", "generated by default as identity" };


	public static ColumnDefinition Parse(ITokenReader r)
	{
		var columnName = r.Read();
		var columnType = ValueParser.Parse(r);

		var c = new ColumnDefinition(columnName, columnType);

		if (columnType.ToText().IsEqualNoCase(PostgresAutoNumberTypes))
		{
			//for Postgres
			c.IsAutoNumber = true;
		}

		var token = r.Peek();
		if (token.IsEqualNoCase("auto_increment"))
		{
			//for MySql
			c.AutoNumberDefinition = ValueParser.Parse(r);
			c.IsAutoNumber = true;
			token = r.Peek();
		}

		if (token.IsEqualNoCase("identity"))
		{
			//for SQLServer
			c.AutoNumberDefinition = ValueParser.Parse(r);
			c.IsAutoNumber = true;
			token = r.Peek();
		}

		if (token.IsEqualNoCase(GeneraetedIdentitySyntaxs))
		{
			//Generated Indentity
			c.AutoNumberDefinition = ValueParser.Parse(r);
			c.IsAutoNumber = true;
			token = r.Peek();
		}

		if (token.IsEqualNoCase("not null"))
		{
			r.Read();
			c.IsNullable = false;
			token = r.Peek();
		}
		else
		{
			c.IsNullable = true;
		}

		if (token.IsEqualNoCase("default"))
		{
			r.Read();
			c.DefaultValueDefinition = ValueParser.Parse(r);
			token = r.Peek();
		}

		if (token.IsEqualNoCase("primary key"))
		{
			r.Read();
			c.IsPrimaryKey = true;
			token = r.Peek();
		}

		if (token.IsEqualNoCase("unique"))
		{
			r.Read();
			c.IsUniqueKey = true;
			token = r.Peek();
		}

		if (token.IsEqualNoCase("check"))
		{
			r.Read();
			c.CheckDefinition = ValueParser.Parse(r);
			token = r.Peek();
		}

		if (token == "," || token == ")" || token.IsEndToken()) return c;
		throw new NotSupportedException($"Token : {token}");
	}
}