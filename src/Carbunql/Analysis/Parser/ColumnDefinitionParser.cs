using Carbunql.Definitions;
using Carbunql.Extensions;

namespace Carbunql.Analysis.Parser;

/// <summary>
/// Parses column definitions from SQL token streams.
/// </summary>
public static class ColumnDefinitionParser
{
    private static IEnumerable<string> PostgresAutoNumberTypes => new[] { "bigserial", "serial", "serial8", "serial4" };

    private static IEnumerable<string> GeneraetedIdentitySyntaxs => new[] { "generated always as identity", "generated by default as identity" };

    /// <summary>
    /// Parses a column definition from the token stream.
    /// </summary>
    /// <param name="t">The table to which the column belongs.</param>
    /// <param name="r">The token reader.</param>
    /// <returns>The parsed column definition.</returns>
    public static ColumnDefinition Parse(ITable t, ITokenReader r)
    {
        r.ReadOrDefault("column");

        var columnName = r.Read();
        var columnType = ValueParser.Parse(r);

        var c = new ColumnDefinition(t, columnName, columnType);

        if (columnType.ToText().IsEqualNoCase(PostgresAutoNumberTypes))
        {
            //for Postgres
            c.IsAutoNumber = true;
        }

        var token = r.Peek();
        if (token.IsEqualNoCase("auto_increment"))
        {
            //for MySql
            c.AutoNumberDefinition = ValueParser.Parse(r);
            c.IsAutoNumber = true;
            token = r.Peek();
        }

        if (token.IsEqualNoCase("identity"))
        {
            //for SQLServer
            c.AutoNumberDefinition = ValueParser.Parse(r);
            c.IsAutoNumber = true;
            token = r.Peek();
        }

        if (token.IsEqualNoCase(GeneraetedIdentitySyntaxs))
        {
            //Generated Indentity
            c.AutoNumberDefinition = ValueParser.Parse(r);
            c.IsAutoNumber = true;
            token = r.Peek();
        }

        if (token.IsEqualNoCase("not null"))
        {
            r.Read();
            c.IsNullable = false;
            token = r.Peek();
        }
        else if (token.IsEqualNoCase("null"))
        {
            r.Read();
            c.IsNullable = false;
            token = r.Peek();
        }
        else
        {
            c.IsNullable = true;
        }

        if (token.IsEqualNoCase("default"))
        {
            r.Read();
            c.DefaultValue = ValueParser.Parse(r);
            token = r.Peek();
        }

        if (token.IsEqualNoCase("primary key"))
        {
            r.Read();
            c.IsPrimaryKey = true;
            token = r.Peek();
        }

        if (token.IsEqualNoCase("unique"))
        {
            r.Read();
            c.IsUniqueKey = true;
            token = r.Peek();
        }

        if (token.IsEqualNoCase("check"))
        {
            r.Read();
            c.CheckDefinition = ValueParser.Parse(r);
            token = r.Peek();
        }

        if (token == "," || token == ")" || token.IsEndToken())
        {
            return c;
        }

        throw new NotSupportedException($"Unsupported token:{token}");
    }
}