using Carbunql.Analysis.Parser;
using Carbunql.Tables;

namespace Carbunql.Clauses;

public class ColumnDefinition : IQueryCommandable
{
	public ColumnDefinition(string columnName, string columnType)
	{
		ColumnName = columnName;
		ColumnType = ValueParser.Parse(columnType);
	}

	public ColumnDefinition(string columnName, ValueBase columnType)
	{
		ColumnName = columnName;
		ColumnType = columnType;
	}

	public string ColumnName { get; set; }

	public ValueBase ColumnType { get; set; }

	public bool IsNullable { get; set; } = false;

	public bool IsPrimaryKey { get; set; } = false;

	public bool IsUniqueKey { get; set; } = false;

	/// <summary>
	/// Postgres :(empty)
	/// MySQL    :AUTO_INCREMENT 
	/// SQLServer:IDENTITY(1,1)
	/// Oracle   :GENERATED BY DEFAULT AS IDENTITY
	/// </summary>
	public ValueBase? AutoNumberDefinition { get; set; } = null;

	public ValueBase? CheckDefinition { get; set; } = null;

	public bool IsAutoNumber => (AutoNumberDefinition != null) ? true : false;

	public ValueBase? DefaultValueDefinition { get; set; } = null;

	public IEnumerable<CommonTable> GetCommonTables()
	{
		yield break;
	}

	public IEnumerable<SelectQuery> GetInternalQueries()
	{
		yield break;
	}

	public IEnumerable<QueryParameter> GetParameters()
	{
		yield break;
	}

	public IEnumerable<PhysicalTable> GetPhysicalTables()
	{
		yield break;
	}

	public IEnumerable<Token> GetTokens(Token? parent)
	{
		yield return new Token(this, parent, ColumnName);

		foreach (var item in ColumnType.GetTokens(parent))
		{
			yield return item;
		}

		if (AutoNumberDefinition != null)
		{
			foreach (var item in AutoNumberDefinition.GetTokens(parent))
			{
				yield return item;
			}
		}

		if (IsPrimaryKey)
		{
			yield return new Token(this, parent, "primary key", isReserved: true);
		}
		else if (IsUniqueKey)
		{
			yield return new Token(this, parent, "unique", isReserved: true);
		}

		if (!IsNullable) yield return new Token(this, parent, "not null", isReserved: true);

		if (DefaultValueDefinition != null)
		{
			yield return new Token(this, parent, "default", isReserved: true);
			foreach (var item in DefaultValueDefinition.GetTokens(parent))
			{
				yield return item;
			}
		}

		if (CheckDefinition != null)
		{
			yield return new Token(this, parent, "check", isReserved: true);
			foreach (var item in CheckDefinition.GetTokens(parent))
			{
				yield return item;
			}
		}
	}
}
