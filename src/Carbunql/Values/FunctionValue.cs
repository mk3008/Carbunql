using Carbunql.Clauses;
using Carbunql.Tables;

namespace Carbunql.Values;

/// <summary>
/// Represents a function value.
/// </summary>
public class FunctionValue : ValueBase
{
    ///// <summary>
    ///// Initializes a new instance of the FunctionValue class with default values.
    ///// </summary>
    //public FunctionValue()
    //{
    //    Name = null!;
    //    Arguments = null!;
    //}

    /// <summary>
    /// Initializes a new instance of the FunctionValue class with the specified name and empty arguments.
    /// </summary>
    /// <param name="name">The name of the function.</param>
    public FunctionValue(string name)
    {
        Name = name;
        Arguments = new ValueCollection();
    }

    /// <summary>
    /// Initializes a new instance of the FunctionValue class with the specified name, empty arguments, and window function.
    /// </summary>
    /// <param name="name">The name of the function.</param>
    /// <param name="winfn">The window function associated with the function.</param>
    public FunctionValue(string name, OverClause winfn)
    {
        Name = name;
        Arguments = new ValueCollection();
        Over = winfn;
    }

    /// <summary>
    /// Initializes a new instance of the FunctionValue class with the specified name and single argument.
    /// </summary>
    /// <param name="name">The name of the function.</param>
    /// <param name="arg">The single argument of the function.</param>
    public FunctionValue(string name, string arg)
    {
        Name = name;
        Arguments = new ValueCollection(arg);
    }

    /// <summary>
    /// Initializes a new instance of the FunctionValue class with the specified name and argument.
    /// </summary>
    /// <param name="name">The name of the function.</param>
    /// <param name="args">The argument of the function.</param>
    public FunctionValue(string name, ValueBase args)
    {
        Name = name;
        Arguments = new ValueCollection
        {
            args
        };
    }

    /// <summary>
    /// Initializes a new instance of the FunctionValue class with the specified name and arguments generated by the provided builder function.
    /// </summary>
    /// <param name="name">The name of the function.</param>
    /// <param name="builder">A function that returns the arguments of the function.</param>
    public FunctionValue(string name, Func<ValueBase> builder)
    {
        Name = name;
        Arguments = new ValueCollection
        {
            builder()
        };
    }

    /// <summary>
    /// Initializes a new instance of the FunctionValue class with the specified name and window function generated by the provided builder function.
    /// </summary>
    /// <param name="name">The name of the function.</param>
    /// <param name="wfbuiilder">A function that returns the window function of the function.</param>
    public FunctionValue(string name, Func<OverClause> wfbuiilder)
    {
        Name = name;
        Arguments = new ValueCollection();
        Over = wfbuiilder();
    }

    /// <summary>
    /// Initializes a new instance of the FunctionValue class with the specified name, argument, and window function.
    /// </summary>
    /// <param name="name">The name of the function.</param>
    /// <param name="args">The argument of the function.</param>
    /// <param name="winfn">The window function associated with the function.</param>
    public FunctionValue(string name, ValueBase args, OverClause winfn)
    {
        Name = name;
        Arguments = new ValueCollection
        {
            args
        };
        Over = winfn;
    }

    /// <summary>
    /// Initializes a new instance of the FunctionValue class with the specified name, argument, and window function generated by the provided builder function.
    /// </summary>
    /// <param name="name">The name of the function.</param>
    /// <param name="args">The argument of the function.</param>
    /// <param name="wfbuiilder">A function that returns the window function of the function.</param>
    public FunctionValue(string name, ValueBase args, Func<OverClause> wfbuiilder)
    {
        Name = name;
        Arguments = new ValueCollection
        {
            args
        };
        Over = wfbuiilder();
    }

    /// <summary>
    /// Initializes a new instance of the FunctionValue class with the specified name, arguments generated by the provided builder function, and window function generated by the provided builder function.
    /// </summary>
    /// <param name="name">The name of the function.</param>
    /// <param name="builder">A function that returns the arguments of the function.</param>
    /// <param name="wfbuiilder">A function that returns the window function of the function.</param>
    public FunctionValue(string name, Func<ValueBase> builder, Func<OverClause> wfbuiilder)
    {
        Name = name;
        Arguments = new ValueCollection
        {
            builder()
        };
        Over = wfbuiilder();
    }

    /// <summary>
    /// Initializes a new instance of the FunctionValue class with the specified name and variable number of arguments.
    /// </summary>
    /// <param name="name">The name of the function.</param>
    /// <param name="values">The variable number of arguments of the function.</param>
    public FunctionValue(string name, params ValueBase[] values)
    {
        Name = name;
        Arguments = new ValueCollection(values.ToList());
    }

    /// <summary>
    /// Initializes a new instance of the FunctionValue class with the specified name and a collection of arguments.
    /// </summary>
    /// <param name="name">The name of the function.</param>
    /// <param name="argument">The collection of arguments of the function.</param>
    public FunctionValue(string name, ValueCollection argument)
    {
        Name = name;
        Arguments = argument;
    }

    /// <summary>
    /// Gets or sets the name of the function.
    /// </summary>
    public string Name { get; init; }

    /// <summary>
    /// Gets the collection of arguments of the function.
    /// </summary>
    [Obsolete("use Arguments")]
    public ValueCollection Argument => Arguments;

    /// <summary>
    /// Gets or sets the collection of arguments of the function.
    /// </summary>
    public ValueCollection Arguments { get; set; }

    /// <summary>
    /// Gets or sets the window function associated with the function.
    /// </summary>
    public OverClause? Over { get; set; }

    /// <summary>
    /// Gets or sets the filter associated with the function.
    /// </summary>
    public Filter? Filter { get; set; }

    /// <summary>
    /// Retrieves the internal queries of the function and its associated filter and window function.
    /// </summary>
    /// <returns>The internal queries of the function.</returns>
    protected override IEnumerable<SelectQuery> GetInternalQueriesCore()
    {
        foreach (var item in Arguments.GetInternalQueries())
        {
            yield return item;
        }
        if (Filter != null)
        {
            foreach (var item in Filter.GetInternalQueries())
            {
                yield return item;
            }
        }
        if (Over != null)
        {
            foreach (var item in Over.GetInternalQueries())
            {
                yield return item;
            }
        }
    }

    /// <summary>
    /// Retrieves the tokens representing the function, its arguments, filter, and window function.
    /// </summary>
    /// <param name="parent">The parent token.</param>
    /// <returns>The tokens representing the function and its associated components.</returns>
    public override IEnumerable<Token> GetCurrentTokens(Token? parent)
    {
        yield return Token.Reserved(this, parent, Name);

        var bracket = Token.ReservedBracketStart(this, parent);
        yield return bracket;
        foreach (var item in Arguments.GetTokens(bracket)) yield return item;
        yield return Token.ReservedBracketEnd(this, parent);

        if (Filter != null)
        {
            foreach (var item in Filter.GetTokens(parent)) yield return item;
        }

        if (Over != null)
        {
            foreach (var item in Over.GetTokens(parent)) yield return item;
        }
    }

    /// <summary>
    /// Retrieves the query parameters of the function and its associated filter and window function.
    /// </summary>
    /// <returns>The query parameters of the function.</returns>
    protected override IEnumerable<QueryParameter> GetParametersCore()
    {
        foreach (var item in Arguments.GetParameters())
        {
            yield return item;
        }
        if (Filter != null)
        {
            foreach (var item in Filter.GetParameters())
            {
                yield return item;
            }
        }
        if (Over != null)
        {
            foreach (var item in Over.GetParameters())
            {
                yield return item;
            }
        }
    }

    /// <summary>
    /// Retrieves the physical tables referenced by the function and its associated filter and window function.
    /// </summary>
    /// <returns>The physical tables referenced by the function.</returns>
    protected override IEnumerable<PhysicalTable> GetPhysicalTablesCore()
    {
        foreach (var item in Arguments.GetPhysicalTables())
        {
            yield return item;
        }
        if (Filter != null)
        {
            foreach (var item in Filter.GetPhysicalTables())
            {
                yield return item;
            }
        }
        if (Over != null)
        {
            foreach (var item in Over.GetPhysicalTables())
            {
                yield return item;
            }
        }
    }

    /// <summary>
    /// Retrieves the common tables referenced by the function and its associated filter and window function.
    /// </summary>
    /// <returns>The common tables referenced by the function.</returns>
    protected override IEnumerable<CommonTable> GetCommonTablesCore()
    {
        foreach (var item in Arguments.GetCommonTables())
        {
            yield return item;
        }
        if (Filter != null)
        {
            foreach (var item in Filter.GetCommonTables())
            {
                yield return item;
            }
        }
        if (Over != null)
        {
            foreach (var item in Over.GetCommonTables())
            {
                yield return item;
            }
        }
    }

    internal override IEnumerable<ColumnValue> GetColumnsCore()
    {
        foreach (var item in Arguments.GetColumns())
        {
            yield return item;
        }
        if (Filter != null)
        {
            foreach (var item in Filter.GetColumns())
            {
                yield return item;
            }
        }
        if (Over != null)
        {
            foreach (var item in Over.GetColumns())
            {
                yield return item;
            }
        }
    }

    public override IEnumerable<ValueBase> GetValues()
    {
        yield return this;

        foreach (var item in Arguments.GetValues())
        {
            yield return item;
        }

        if (OperatableValue != null)
        {
            foreach (var item in OperatableValue.Value.GetValues())
            {
                yield return item;
            }
        }
    }
}