using Carbunql.Analysis.Parser;
using Carbunql.Clauses;
using Carbunql.Tables;
using Carbunql.Values;
using System.Diagnostics.CodeAnalysis;

namespace Carbunql.Definitions;

/// <summary>
/// Represents the definition of a column in a database table.
/// </summary>
public class ColumnDefinition : ITableDefinition
{
    /// <summary>
    /// Initializes a new instance of the <see cref="ColumnDefinition"/> class with the specified schema, table, column name, and column type.
    /// </summary>
    /// <param name="schema">The schema of the table.</param>
    /// <param name="table">The name of the table.</param>
    /// <param name="columnName">The name of the column.</param>
    /// <param name="columnType">The type of the column.</param>
    public ColumnDefinition(string schema, string table, string columnName, string columnType)
    {
        Schema = schema;
        Table = table;
        ColumnName = columnName;
        ColumnType = ValueParser.Parse(columnType);
        RelationColumnType = ColumnType;
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="ColumnDefinition"/> class with the specified table, column name, and column type.
    /// </summary>
    /// <param name="t">The table associated with the column.</param>
    /// <param name="columnName">The name of the column.</param>
    /// <param name="columnType">The type of the column.</param>
    public ColumnDefinition(ITable t, string columnName, string columnType)
    {
        Schema = t.Schema;
        Table = t.Table;
        ColumnName = columnName;
        ColumnType = ValueParser.Parse(columnType);
        RelationColumnType = ColumnType;
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="ColumnDefinition"/> class with the specified table, column name, and column type.
    /// </summary>
    /// <param name="t">The table associated with the column.</param>
    /// <param name="columnName">The name of the column.</param>
    /// <param name="columnType">The type of the column.</param>
    public ColumnDefinition(ITable t, string columnName, ValueBase columnType)
    {
        Schema = t.Schema;
        Table = t.Table;
        ColumnName = columnName;
        ColumnType = columnType;
        RelationColumnType = ColumnType;
    }

    /// <summary>
    /// Gets or sets the schema of the table.
    /// </summary>
    public string Schema { get; init; }

    /// <summary>
    /// Gets or sets the name of the table.
    /// </summary>
    public string Table { get; init; }

    /// <summary>
    /// Gets or sets the name of the column.
    /// </summary>
    public string ColumnName { get; set; }

    /// <summary>
    /// Gets or sets the type of the column.
    /// </summary>
    public ValueBase ColumnType { get; set; }

    /// <summary>
    /// Gets or sets the related column type.
    /// </summary>
    public ValueBase RelationColumnType { get; set; }

    /// <summary>
    /// Gets or sets a value indicating whether the column is nullable.
    /// </summary>
    public bool IsNullable { get; set; } = false;

    /// <summary>
    /// Gets or sets a value indicating whether the column is a primary key.
    /// </summary>
    public bool IsPrimaryKey { get; set; } = false;

    /// <summary>
    /// Gets or sets a value indicating whether the column is a unique key.
    /// </summary>
    public bool IsUniqueKey { get; set; } = false;

    /// <summary>
    /// Gets or sets the definition of auto-numbering for the column.
    /// Postgres: (empty)
    /// MySQL: AUTO_INCREMENT
    /// SQLServer: IDENTITY(1,1)
    /// Oracle: GENERATED BY DEFAULT AS IDENTITY
    /// </summary>
    public ValueBase? AutoNumberDefinition { get; set; } = null;
    /// <summary>
    /// Gets or sets the definition of a check constraint for the column.
    /// </summary>
    public ValueBase? CheckDefinition { get; set; } = null;

    /// <summary>
    /// Gets or sets a value indicating whether the column has auto-numbering enabled.
    /// </summary>
    public bool IsAutoNumber { get; set; } = false;

    /// <summary>
    /// Gets or sets the default value for the column.
    /// </summary>
    public ValueBase? DefaultValue { get; set; } = null;

    /// <summary>
    /// Gets the common tables associated with the column definition (currently empty).
    /// </summary>
    public IEnumerable<CommonTable> GetCommonTables()
    {
        yield break;
    }

    /// <summary>
    /// Gets the internal queries associated with the column definition (currently empty).
    /// </summary>
    public IEnumerable<SelectQuery> GetInternalQueries()
    {
        yield break;
    }

    /// <summary>
    /// Gets the parameters associated with the column definition (currently empty).
    /// </summary>
    public IEnumerable<QueryParameter> GetParameters()
    {
        yield break;
    }

    /// <summary>
    /// Gets the physical tables associated with the column definition (currently empty).
    /// </summary>
    public IEnumerable<PhysicalTable> GetPhysicalTables()
    {
        yield break;
    }

    /// <summary>
    /// Gets the tokens representing the column definition.
    /// </summary>
    public IEnumerable<Token> GetTokens(Token? parent)
    {
        yield return new Token(this, parent, ColumnName);

        foreach (var item in ColumnType.GetTokens(parent))
        {
            yield return item;
        }

        if (AutoNumberDefinition != null)
        {
            foreach (var item in AutoNumberDefinition.GetTokens(parent))
            {
                yield return item;
            }
        }

        if (IsPrimaryKey)
        {
            yield return new Token(this, parent, "primary key", isReserved: true);
        }
        else if (IsUniqueKey)
        {
            yield return new Token(this, parent, "unique", isReserved: true);
        }

        if (!IsNullable) yield return new Token(this, parent, "not null", isReserved: true);

        if (DefaultValue != null)
        {
            yield return new Token(this, parent, "default", isReserved: true);
            foreach (var item in DefaultValue.GetTokens(parent))
            {
                yield return item;
            }
        }

        if (CheckDefinition != null)
        {
            yield return new Token(this, parent, "check", isReserved: true);
            foreach (var item in CheckDefinition.GetTokens(parent))
            {
                yield return item;
            }
        }
    }

    /// <summary>
    /// Tries to apply the column definition to the specified table definition clause (always returns true).
    /// </summary>
    public bool TrySet(TableDefinitionClause clause)
    {
        // Since the Column is integrated from the beginning,
        // it does not do anything, but it is treated as integrated.
        return true;
    }

    /// <summary>
    /// Attempts to create an index from the column definition (currently not implemented).
    /// </summary>
    public bool TryToIndex([MaybeNullWhen(false)] out CreateIndexQuery query)
    {
        query = default;
        return false;
    }

    /// <summary>
    /// Attempts to normalize the column definition (always returns true).
    /// </summary>
    public bool TryNormalize([MaybeNullWhen(false)] out ColumnDefinition column)
    {
        // Exclude key information
        // Exclude check constraint
        column = new ColumnDefinition(this, ColumnName, ColumnType) { IsNullable = IsNullable, AutoNumberDefinition = AutoNumberDefinition, DefaultValue = DefaultValue };
        return true;
    }

    /// <summary>
    /// Attempts to disassemble the column definition (currently returns the check constraint if defined).
    /// </summary>
    /// <param name="constraint">The disassembled check constraint, which is the check constraint itself if defined; otherwise, null.</param>
    /// <returns>True if the column definition contains a check constraint; otherwise, false.</returns>
    public bool TryDisassemble([MaybeNullWhen(false)] out IConstraint constraint)
    {
        constraint = null;
        if (CheckDefinition == null) return false;

        constraint = new CheckConstraint(this) { Value = CheckDefinition };
        return true;
    }

    public IEnumerable<ColumnValue> GetColumns()
    {
        yield break;
    }
}
