@page "/"
@page "/format"

@using Carbunql.Analysis;
@using Carbunql;

<PageTitle>Format</PageTitle>

<RadzenText TextStyle="TextStyle.H4">Format</RadzenText>

<RadzenText>SQL can be formatted.(select, values, insert, update, create table, create index, alter table)</RadzenText>

<RadzenTabs TabPosition=TabPosition.Top RenderMode="TabRenderMode.Client" >
    <Tabs>
        <RadzenTabsItem Text="Example">
			<div class="row">
				<div class="col-md-6 p-3">
					<RadzenCard>
						<RadzenText TextStyle="TextStyle.Subtitle2">Input</RadzenText>
						<RadzenTextArea @bind-Value=@sql TValue="string" Change=@OnChange Style="width: 100%; min-height: 600px; font-family: 'Ricty Diminished', SFMono-Regular, Consolas, 'Courier New', 'BIZ UDGothic', Meiryo, monospace; font-size: 18px; white-space: pre;" Placeholder="Enter select query(ex. select id, value from table)" />
					</RadzenCard>
				</div>
				<div class="col-md-6 p-3">
					<RadzenCard>
						<RadzenText TextStyle="TextStyle.Subtitle2">Result</RadzenText>
						<RadzenTextArea @bind-Value=@fsql TValue="string" Change=@OnChange Style="width: 100%; min-height: 600px; font-family: 'Ricty Diminished', SFMono-Regular, Consolas, 'Courier New', 'BIZ UDGothic', Meiryo, monospace; font-size: 18px; white-space: pre;" ReadOnly="true" />
					</RadzenCard>
				</div>
			</div>

        </RadzenTabsItem>
        <RadzenTabsItem Text="Source">
	        <RadzenText Style="font-family: 'Ricty Diminished', SFMono-Regular, Consolas, 'Courier New', 'BIZ UDGothic', Meiryo, monospace; font-size: 18px; white-space: pre;" ReadOnly="true" >using Carbunql;

var sql = QueryCommandableParser.Parse("select id, val from table_a as a")
	.ToText();</RadzenText>
        </RadzenTabsItem>
    </Tabs>
</RadzenTabs>

@code {

    string fsql = string.Empty;

    protected override void OnInitialized()
	{
		OnChange(sql);
	}

	void OnClear()
	{
		sql = string.Empty;
		OnChange(sql);
	}

	void OnChange(string value)
	{
		if (string.IsNullOrEmpty(value))
		{
			fsql = string.Empty;
			return;
		}
		try
		{
            var q = QueryCommandableParser.Parse(sql);
			fsql = q.ToText();
		}
		catch (Exception ex)
		{
			fsql = ex.ToString();
		}
	}

    string sql = @"with
dat(line_id, name, unit_price, quantity, tax_rate) as ( 
    values
    (1, 'apple' , 105, 5, 0.07),
    (2, 'orange', 203, 3, 0.07),
    (3, 'banana', 233, 9, 0.07),
    (4, 'tea'   , 309, 7, 0.08),
    (5, 'coffee', 555, 9, 0.08),
    (6, 'cola'  , 456, 2, 0.08)
),
detail as (
    select  
        q.*,
        trunc(q.price * (1 + q.tax_rate)) - q.price as tax,
        q.price * (1 + q.tax_rate) - q.price as raw_tax
    from
        (
            select
                dat.*,
                (dat.unit_price * dat.quantity) as price
            from
                dat
        ) q
), 
tax_summary as (
    select
        d.tax_rate,
        trunc(sum(raw_tax)) as total_tax
    from
        detail d
    group by
        d.tax_rate
)
select 
   line_id,
    name,
    unit_price,
    quantity,
    tax_rate,
    price,
    price + tax as tax_included_price,
    tax
from
    (
        select
            line_id,
            name,
            unit_price,
            quantity,
            tax_rate,
            price,
            tax + adjust_tax as tax
        from
            (
                select
                    q.*,
                    case when q.total_tax - q.cumulative >= q.priority then 1 else 0 end as adjust_tax
                from
                    (
                        select  
                            d.*, 
                            s.total_tax,
                            sum(d.tax) over (partition by d.tax_rate) as cumulative,
                            row_number() over (partition by d.tax_rate order by d.raw_tax % 1 desc, d.line_id) as priority
                        from
                            detail d
                            inner join tax_summary s on d.tax_rate = s.tax_rate
                    ) q
            ) q
    ) q
order by 
    line_id";
}